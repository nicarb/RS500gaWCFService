//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 12.0.21005.1
// 
namespace RS500gaWCFServiceTest.LoadPlaylistDataService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LoadPlaylistDataService.ILoadPlaylistDataService")]
    public interface ILoadPlaylistDataService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadPlaylistDataService/sendLibrary", ReplyAction="http://tempuri.org/ILoadPlaylistDataService/sendLibraryResponse")]
        System.Threading.Tasks.Task<string> sendLibraryAsync(string xmlcontent, string libraryTitle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadPlaylistDataService/createLibrary", ReplyAction="http://tempuri.org/ILoadPlaylistDataService/createLibraryResponse")]
        System.Threading.Tasks.Task<string> createLibraryAsync(string xmlcontent, string libraryTitle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadPlaylistDataService/getSongLyrics", ReplyAction="http://tempuri.org/ILoadPlaylistDataService/getSongLyricsResponse")]
        System.Threading.Tasks.Task<string> getSongLyricsAsync(string song, string artist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadPlaylistDataService/sendPlaylist", ReplyAction="http://tempuri.org/ILoadPlaylistDataService/sendPlaylistResponse")]
        System.Threading.Tasks.Task<string> sendPlaylistAsync(string xmlcontent, string playlistTitle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadPlaylistDataService/generatePlaylist", ReplyAction="http://tempuri.org/ILoadPlaylistDataService/generatePlaylistResponse")]
        System.Threading.Tasks.Task<string> generatePlaylistAsync(string xmlcontent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadPlaylistDataService/getSimilarArtistsLF", ReplyAction="http://tempuri.org/ILoadPlaylistDataService/getSimilarArtistsLFResponse")]
        System.Threading.Tasks.Task<string> getSimilarArtistsLFAsync(string limit, string artist, bool doAutocorrect, string mbid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadPlaylistDataService/getSimilarTracksLF", ReplyAction="http://tempuri.org/ILoadPlaylistDataService/getSimilarTracksLFResponse")]
        System.Threading.Tasks.Task<string> getSimilarTracksLFAsync(string track, string artistName, string mbid, bool doAutocorrect, string limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadPlaylistDataService/createPlaylistLF", ReplyAction="http://tempuri.org/ILoadPlaylistDataService/createPlaylistLFResponse")]
        System.Threading.Tasks.Task<string> createPlaylistLFAsync(string title, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadPlaylistDataService/updateAllRs500GaAlbumsInfo", ReplyAction="http://tempuri.org/ILoadPlaylistDataService/updateAllRs500GaAlbumsInfoResponse")]
        System.Threading.Tasks.Task<string> updateAllRs500GaAlbumsInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadPlaylistDataService/updateAllRs500GaTracksInfo", ReplyAction="http://tempuri.org/ILoadPlaylistDataService/updateAllRs500GaTracksInfoResponse")]
        System.Threading.Tasks.Task<string> updateAllRs500GaTracksInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadPlaylistDataService/updateAllRs500GaTrackSimilars", ReplyAction="http://tempuri.org/ILoadPlaylistDataService/updateAllRs500GaTrackSimilarsResponse" +
            "")]
        System.Threading.Tasks.Task<string> updateAllRs500GaTrackSimilarsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadPlaylistDataService/updateAllRs500GaArtistSimilars", ReplyAction="http://tempuri.org/ILoadPlaylistDataService/updateAllRs500GaArtistSimilarsRespons" +
            "e")]
        System.Threading.Tasks.Task<string> updateAllRs500GaArtistSimilarsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadPlaylistDataService/updateAllRs500GaTracksGraphConnection" +
            "s", ReplyAction="http://tempuri.org/ILoadPlaylistDataService/updateAllRs500GaTracksGraphConnection" +
            "sResponse")]
        System.Threading.Tasks.Task<string> updateAllRs500GaTracksGraphConnectionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadPlaylistDataService/updateAllRs500GaArtistsGraphConnectio" +
            "ns", ReplyAction="http://tempuri.org/ILoadPlaylistDataService/updateAllRs500GaArtistsGraphConnectio" +
            "nsResponse")]
        System.Threading.Tasks.Task<string> updateAllRs500GaArtistsGraphConnectionsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILoadPlaylistDataServiceChannel : RS500gaWCFServiceTest.LoadPlaylistDataService.ILoadPlaylistDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoadPlaylistDataServiceClient : System.ServiceModel.ClientBase<RS500gaWCFServiceTest.LoadPlaylistDataService.ILoadPlaylistDataService>, RS500gaWCFServiceTest.LoadPlaylistDataService.ILoadPlaylistDataService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public LoadPlaylistDataServiceClient() : 
                base(LoadPlaylistDataServiceClient.GetDefaultBinding(), LoadPlaylistDataServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ILoadPlaylistDataService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public LoadPlaylistDataServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(LoadPlaylistDataServiceClient.GetBindingForEndpoint(endpointConfiguration), LoadPlaylistDataServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public LoadPlaylistDataServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(LoadPlaylistDataServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public LoadPlaylistDataServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(LoadPlaylistDataServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public LoadPlaylistDataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<string> sendLibraryAsync(string xmlcontent, string libraryTitle) {
            return base.Channel.sendLibraryAsync(xmlcontent, libraryTitle);
        }
        
        public System.Threading.Tasks.Task<string> createLibraryAsync(string xmlcontent, string libraryTitle) {
            return base.Channel.createLibraryAsync(xmlcontent, libraryTitle);
        }
        
        public System.Threading.Tasks.Task<string> getSongLyricsAsync(string song, string artist) {
            return base.Channel.getSongLyricsAsync(song, artist);
        }
        
        public System.Threading.Tasks.Task<string> sendPlaylistAsync(string xmlcontent, string playlistTitle) {
            return base.Channel.sendPlaylistAsync(xmlcontent, playlistTitle);
        }
        
        public System.Threading.Tasks.Task<string> generatePlaylistAsync(string xmlcontent) {
            return base.Channel.generatePlaylistAsync(xmlcontent);
        }
        
        public System.Threading.Tasks.Task<string> getSimilarArtistsLFAsync(string limit, string artist, bool doAutocorrect, string mbid) {
            return base.Channel.getSimilarArtistsLFAsync(limit, artist, doAutocorrect, mbid);
        }
        
        public System.Threading.Tasks.Task<string> getSimilarTracksLFAsync(string track, string artistName, string mbid, bool doAutocorrect, string limit) {
            return base.Channel.getSimilarTracksLFAsync(track, artistName, mbid, doAutocorrect, limit);
        }
        
        public System.Threading.Tasks.Task<string> createPlaylistLFAsync(string title, string description) {
            return base.Channel.createPlaylistLFAsync(title, description);
        }
        
        public System.Threading.Tasks.Task<string> updateAllRs500GaAlbumsInfoAsync() {
            return base.Channel.updateAllRs500GaAlbumsInfoAsync();
        }
        
        public System.Threading.Tasks.Task<string> updateAllRs500GaTracksInfoAsync() {
            return base.Channel.updateAllRs500GaTracksInfoAsync();
        }
        
        public System.Threading.Tasks.Task<string> updateAllRs500GaTrackSimilarsAsync() {
            return base.Channel.updateAllRs500GaTrackSimilarsAsync();
        }
        
        public System.Threading.Tasks.Task<string> updateAllRs500GaArtistSimilarsAsync() {
            return base.Channel.updateAllRs500GaArtistSimilarsAsync();
        }
        
        public System.Threading.Tasks.Task<string> updateAllRs500GaTracksGraphConnectionsAsync() {
            return base.Channel.updateAllRs500GaTracksGraphConnectionsAsync();
        }
        
        public System.Threading.Tasks.Task<string> updateAllRs500GaArtistsGraphConnectionsAsync() {
            return base.Channel.updateAllRs500GaArtistsGraphConnectionsAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ILoadPlaylistDataService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ILoadPlaylistDataService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:31290/WS/LoadPlaylistDataService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return LoadPlaylistDataServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ILoadPlaylistDataService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return LoadPlaylistDataServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ILoadPlaylistDataService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_ILoadPlaylistDataService,
        }
    }
}
